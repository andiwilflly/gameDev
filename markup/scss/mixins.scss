// fix hover on touch device
@mixin onHover {
  @if $noTouch == true {
    &:hover {
      @content;
    }
  }
}

@mixin box-sizing($box-model: border-box) {
  -webkit-box-sizing: $box-model;
  -moz-box-sizing: $box-model;
  box-sizing: $box-model;
}

// Loop icons for sprite
@mixin spriteIcons($spritesheet-sprites) {
  @each $icon in $spritesheet-sprites {
    $sprite-name: nth($icon, 10);
    &.#{$sprite-name} {
      @include sprite-width($icon);
      @include sprite-height($icon);
      @include sprite-position($icon);
    }
  }
}

// Make wrapper for image that can have any size.
// Image in this wrapper always centered by horizontal and vertical position.
// Arguments: [width], [height], [background]
@mixin img-centered($container-width, $container-height, $container-background: transparent) {
  background: $container-background;
  overflow: hidden;
  width: $container-width;
  height: $container-height;
  line-height: $container-height;
  text-align: center;
  img {
    max-width: 100%;
    max-height: 100%;
  }
}

// Centering With Sass
// http://www.sitepoint.com/centering-with-sass/
@mixin center($width: null, $height: null) {
  position: absolute;
  top: 50%;
  left: 50%;

  @if not $width and not $height {
    transform: translate(-50%, -50%);
  } @else if $width and $height {
    width: $width;
    height: $height;
    margin: -($width / 2) #{0 0} -($height / 2);
  } @else if not $height {
    width: $width;
    margin-left: -($width / 2);
    transform: translateY(-50%);
  } @else {
    height: $height;
    margin-top: -($height / 2);
    transform: translateX(-50%);
  }
}

// Clearfix
// http://nicolasgallagher.com/micro-clearfix-hack/
@mixin cf {
  &:before,
  &:after {
    content: "";
    display: table;
  }

  &:after {
    clear: both;
  }
}

// Text hide
// -------------------------

@mixin hideText {
  overflow: hidden;
  text-indent: -500%;
  white-space: nowrap;
}

// Element hide
// -------------------------

@mixin hideEl {
  position: absolute;
  top: 0;
  left: 0;
  clip: rect(0, 0, 0, 0);
}

// Fonts
// --------------------------------------------------

@mixin customFont($fontName, $fileName, $path, $weight: normal, $style: normal) {
  @font-face {
    font-family: $fontName;
    src: url($path + $fileName + '.eot?v=' + $compileVersion);
    src: url($path + $fileName + '.eot?v=' + $compileVersion + '#iefix') format('embedded-opentype'),
    url($path + $fileName + '.woff?v=' + $compileVersion) format('woff'),
    url($path + $fileName + '.ttf?v=' + $compileVersion) format('truetype');
    //url($path + $fileName + '.svg#' + $fileName + '?v=' + $compileVersion) format('svg');
    font-weight: $weight;
    font-style: $style;
  }
}

// Placeholder text
@mixin placeholder($color) {
  &:-moz-placeholder {
    opacity: 1;
    color: $color;
    text-transform: none;
  }
  // Firefox 4-18
  &::-moz-placeholder {
    opacity: 1;
    color: $color;
    text-transform: none;
  }
  // Firefox 19+
  &:-ms-input-placeholder {
    color: $color;
    text-transform: none;
  }
  // Internet Explorer 10+
  &::-webkit-input-placeholder {
    color: $color;
    text-transform: none;
  }
  // Safari and Chrome
}

// Off user-select
@mixin noselect {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

@mixin disableClick() {
  position: relative;
  &:before {
    position: absolute;
    top: 0;
    content: "";
    left: 0;
    right: 0;
    bottom: 0;
    display: block;
    height: 100%;
    width: 100%;
    z-index: 1000;
  }
}

// Recalculation height sticky footer
@mixin setStickyFooterHeight($recalcHeightStickyFooter: $heightStickyFooter) {
  .stickyWrap {
    margin-bottom: -($recalcHeightStickyFooter);
    &:after {
      height: $recalcHeightStickyFooter;
    }
  }
}

// Hack against webkit autofill form ugly yellow color
@mixin webkitAutofill($bgColor) {
  &:-webkit-autofill {
    box-shadow: 0 0 0 10em $bgColor inset;
    @include onHover {
      box-shadow: 0 0 0 10em $bgColor inset;
    }

    &:focus {
      box-shadow: 0 0 0 10em $bgColor inset;
    }
  }
}

// RESPONSIVE SVG SASS MIXIN
@mixin svg-responsive($widthSVG: 1, $heightSVG: 1, $width: 100%, $position: relative) {
  position: $position;
  width: $width;
  height: 0;
  padding-bottom: ($heightSVG/$widthSVG) * $width;
}

@mixin svg-icon-holder(
  $width: 40px,
  $height: 40px,
  $iconSize: $iconSize20,
  $color: $white,
  $colorHvr: $primary,
  $position: relative
) {
  box-sizing: border-box;
  position: $position;
  width: $width;
  height: $height;
  font-size: $iconSize;
  color: $color;

  @include onHover {
    color: $colorHvr;
  }

  &:active {
    color: $colorHvr;
  }
}


/// Mixin to customize scrollbars
/// Beware, this does not work in all browsers
/// @author Hugo Giraudel
/// @param {Length} $size - Horizontal scrollbar's height and vertical scrollbar's width
/// @param {Color} $foreground-color - Scrollbar's color
/// @param {Color} $background-color [mix($foreground-color, white, 50%)] - Scrollbar's color
/// @example scss - Scrollbar styling
/// @include scrollbars(.5em, slategray);
@mixin scrollbars($size, $foreground-color, $background-color: mix($foreground-color, white,  50%)) {
  // For Google Chrome
  &::-webkit-scrollbar {
    width:  $size;
    height: $size;
  }

  &::-webkit-scrollbar-thumb {
    background: $foreground-color;
  }

  &::-webkit-scrollbar-track {
    background: $background-color;
  }

  // For Internet Explorer
  & {
    scrollbar-face-color: $foreground-color;
    scrollbar-track-color: $background-color;
  }
}

@mixin textStyle($color: $textStyleColor, $ff: $fontFamilyBase, $fz: $textStyleFZ, $lh: $lineHeightBase) {
  font-family: $ff;
  font-size: $fz;
  line-height: $lh;
  color: $color;
}

// Media queries for width
// --------------------------------------------------

@mixin screenWidth($minWidth: null, $maxWidth: null) {
  @if not $minWidth {
    @media screen and (max-width: $maxWidth) {
      @content;
    }
  } @else if not $maxWidth {
    // use plus '1' for don't overlap
    @media screen and (min-width: $minWidth + 1) {
      @content;
    }
  } @else {
    // use plus '1' for don't overlap
    @media screen and (min-width: $minWidth + 1) and (max-width: $maxWidth) {
      @content;
    }
  }
}

// Media queries for height
@mixin screenHeight($minHeight, $maxHeight) {
  // use plus '1' for don't overlap
  @media screen and (min-height: $minHeight + 1) and (max-height: $maxHeight) {
    @content;
  }
}

@mixin maxHeightScreen($maxHeight) {
  @media screen and (max-height: $maxHeight) {
    @content;
  }
}

@mixin minHeightScreen($minHeight) {
  // use plus '1' for don't overlap
  @media screen and (min-height: $minHeight + 1) {
    @content;
  }
}

// Animations
// --------------------------------------------------

@mixin transition($transition-property:all, $transition-time:1s, $method:linear) {
  -webkit-transition: $transition-property $transition-time $method;
  -moz-transition: $transition-property $transition-time $method;
  -ms-transition: $transition-property $transition-time $method;
  -o-transition: $transition-property $transition-time $method;
  transition: $transition-property $transition-time $method;
}

@mixin animation($animate...) {
  $max: length($animate);
  $animations: '';

  @for $i from 1 through $max {
    $animations: #{$animations + nth($animate, $i)};

    @if $i < $max {
      $animations: #{$animations + ", "};
    }
  }
  -webkit-animation: $animations;
  -moz-animation:    $animations;
  -o-animation:      $animations;
  animation:         $animations;
}

// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate(
  $rotate:      $default-rotate,
  $perspective: false,
  $only3d:      false
) {
  $trans: rotate($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans);
}

// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale(
  $scale-x:     1em,
  $scale-y:     $scale-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: scale($scale-x, $scale-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans);
}

// Scale an object along the x axis
// @include scaleX( [ scale-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleX(
  $scale:       1em,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleX($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans);
}

// Scale an object along the y axis
// @include scaleY( [ scale-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleY(
  $scale:       1em,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleY($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans);
}

// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewX(
  $skew-x: 5deg,
  $only3d: false
) {
  $trans: skewX($skew-x);
  @include transform($trans);
}

@mixin transform($transforms) {
  -moz-transform: $transforms;
  -o-transform: $transforms;
  -ms-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}

// Create a named animation sequence that can be applied to elements later.
//
//     $name    - The name of your animation.
//     @content - The keyframes of the animation.
@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @-ms-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}

@mixin animation-name($name...) {
  -o-animation-name: $name;
  -moz-animation-name: $name;
  -webkit-animation-name: $name;
  animation-name: $name;
}
@mixin animation-duration($duration...) {
  -o-animation-duration: $duration;
  -moz-animation-duration: $duration;
  -webkit-animation-duration: $duration;
  animation-duration: $duration;
}

@mixin animation-iteration-count($count...) {
  -o-animation-iteration-count: $count;
  -moz-animation-iteration-count: $count;
  -webkit-animation-iteration-count: $count;
  animation-iteration-count: $count;
}

@mixin animation-delay($delay...) {
  -o-animation-delay: $delay;
  -moz-animation-delay: $delay;
  -webkit-animation-delay: $delay;
  animation-delay: $delay;
}

@mixin animation-timing-function($name...) {
  -o-animation-timing-function: $name;
  -moz-animation-timing-function: $name;
  -webkit-animation-timing-function: $name;
  animation-timing-function: $name;
}

// Move an object along the x axis (2D)
// @include translate( [ translate-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateX(
  $trans-x:     1em,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateX($trans-x);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans);
}

// Move an object along the y axis (2D)
// @include translate( [ translate-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateY(
  $trans-y:     1em,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateY($trans-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans);
}

@mixin opacity($opacity) {
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$opacity * 100})";
  filter: alpha(opactiy=($opacity * 100)); // should be after -ms-filter to support IE8 in IE7 rendering mode
  -moz-opacity: $opacity;
  -khtml-opacity: $opacity;
  opacity: $opacity;
}

// Hover effects
// -------------------------

@mixin hoverEffectOpacity($opacity: .75) {
  @include opacity(1);
  @include transition(opacity, 0.2s, linear);
  &:hover {
    @include opacity($opacity);
  }
}

// invert
@mixin hoverEffectOpacityInverse($opacity: .75) {
  @include opacity($opacity);
  @include transition(opacity, 0.2s, linear);
  &:hover {
    @include opacity(1);
  }
}


// Transition
// --------------------------------------------------

@mixin translate($x, $y) {
  -webkit-transform: translate($x, $y);
  -ms-transform: translate($x, $y); // IE9+
  transform: translate($x, $y);
}

@mixin transition-transform($transition) {
  -webkit-transition: -webkit-transform $transition;
  -moz-transition: -moz-transform $transition;
  transition: transform $transition;
}
